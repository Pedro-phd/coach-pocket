// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//coach
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // coach pocket fields
  document String?
  cref     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Workout   Workout[]
  Member    Member[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Member {
  id      String @id @default(cuid())
  coach   User   @relation(fields: [coachId], references: [id])
  coachId String

  name          String
  email         String?
  document      String?         @unique()
  height        Float?
  weight        Float?
  Training      Training[]
  MemberHistory MemberHistory[]

  @@index([name, coachId])
}

model MemberHistory {
  id       String @id @default(cuid())
  member   Member @relation(fields: [memberId], references: [id])
  memberId String

  height String?
  weight String?

  date DateTime @default(now())
}

model Workout {
  id      String @id @default(cuid())
  coach   User   @relation(fields: [coachId], references: [id])
  coachId String

  title        String
  description  String
  content      String
  details      String
  TrainingItem TrainingItem[]

  @@index([title, coachId])
}

model TrainingItem {
  id        String  @id @default(cuid())
  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId String

  weight      String?
  repeat      String?
  observation String?
  set         String?
  Training    Training? @relation(fields: [trainingId], references: [id])
  trainingId  String?
}

model Training {
  id            String         @id @default(cuid())
  trainingItems TrainingItem[]

  member   Member @relation(fields: [memberId], references: [id])
  memberId String

  title       String
  description String?
}
